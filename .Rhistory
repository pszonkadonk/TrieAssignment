movie_directors = movies_merged_only_movies[,c('Title','Year','Director')]
split_by_director = dplyr::mutate(movie_directors, Director = strsplit(Director,","))
split_by_director = unnest(split_by_director)
View(split_by_director)
View(split_by_director)
movie_directors = movies_merged_only_movies[,c('Year','Director')]
split_by_director = dplyr::mutate(movie_directors, Director = strsplit(Director,","))
split_by_director = unnest(split_by_director)
melt_directors = melt(split_by_director,id.vars=c('Year'),
variable.vars='Director')
View(melt_movie_data_genre)
View(melt_directors)
View(melt_directors)
melded_directors = dcast(melt_directors, formula=Year~variable,
fun.aggregate = sum)
melded_directors = dcast(melt_directors, formula=Year~variable,
fun.aggregate = length)
View(melded_directors)
melt_directors = melt(split_by_director,id.vars=c('Director'),
measure.vars='Year')
melded_directors = dcast(melt_directors, formula=Year~variable,
fun.aggregate = length)
melded_directors = dcast(melt_directors, formula=Director~variable,
fun.aggregate = length)
top_twenty_five_director s= melded_directors[1:25,]
top_twenty_five_directors= melded_directors[1:25,]
View(top_twenty_five_directors)
top_twenty_five_directors= melded_directors[order(Year)]
top_twenty_five_directors= melded_directors[order(-Year)]
top_twenty_five_directors= melded_directors[order(-top_twenty_five_directors$Year)]
top_twenty_five_directors= melded_directors[order(-melded_directors$Year)]
top_twenty_five_directors= melded_directors[order(-melded_directors$Year),]
top_twenty_five_directors= melded_directors[order(-melded_directors$Year),][1:25]
top_twenty_five_directors= melded_directors[order(-melded_directors$Year)[1:25],]
top_twenty_five_directors= melded_directors[order(-melded_directors$Year)[1:35],]
top_twenty_five_directors= melded_directors[order(-melded_directors$Year)[1:50],]
top_twenty_five_directors= melded_directors[order(-melded_directors$Year)[1:60],]
rename(top_twenty_five_directors, Year, Number.Of.Films)
dplyr::rename((top_twenty_five_directors, Year, Number.Of.Films))
dplyr::rename((top_twenty_five_directors, Year = Number.Of.Films))
?rename
?dplyr]
?dplyr
?plyr
dplyr::rename((top_twenty_five_directors, Year = Number.Of.Films))
dplyr::rename((top_twenty_five_directors Year = Number.Of.Films))
dplyr::rename(top_twenty_five_directors, Year = Number.Of.Films)
dplyr::rename(top_twenty_five_directors, Year = NumberFilms)
dplyr::rename(top_twenty_five_directors, Year = "NumberFilms")
dplyr::rename(top_twenty_five_directors, "Year" = "NumberFilms")
dplyr::rename(top_twenty_five_directors, Year = "NumberFilms")
dplyr::rename(top_twenty_five_directors, c("Year" = "NumberFilms"))
rename(top_twenty_five_directors, c("Year" = "NumberFilms"))
plyr::rename(top_twenty_five_directors, c("Year" = "NumberFilms"))
names(top_twenty_five_directors)
plyr::rename(top_twenty_five_directors, c("Year" = "NumberFilms"))
top_twenty_five_directors
names(top_twenty_five_directors) =  plyr::rename(top_twenty_five_directors, c("Year" = "NumberFilms"))
names(top_twenty_five_directors)
top_twenty_five_directors
top_twenty_five_directors= melded_directors[order(-melded_directors$Year)[1:60],]
plyr::rename(top_twenty_five_directors, c("Year" = "NumberFilms"))
top_twenty_five_directors = plyr::rename(top_twenty_five_directors, c("Year" = "NumberFilms"))
top_twenty_five_directors
names(top_twenty_five_directors)
ggplot(melt_directors,aes(Director)) +
geom_bar(stat="identity")
ggplot(melt_directors,aes(x = Director, y = NumberFilms)) +
geom_bar(stat="identity")
names(top_twenty_five_directors)
ggplot(top_twenty_five_directors,aes(x = Director, y = NumberFilms)) +
geom_bar(stat="identity")
movie_directors = movies_merged_only_movies[,c('Year','Director')]
split_by_director = dplyr::mutate(movie_directors, Director = strsplit(Director,","))
split_by_director = unnest(split_by_director)
melt_directors = melt(split_by_director,id.vars=c('Director'),
measure.vars='Year')
melded_directors = dcast(melt_directors, formula=Director~variable,
fun.aggregate = length)
top_twenty_five_directors= melded_directors[order(-melded_directors$Year)[1:25],]
top_twenty_five_directors = plyr::rename(top_twenty_five_directors, c("Year" = "NumberFilms"))
ggplot(top_twenty_five_directors,aes(x = Director, y = NumberFilms)) +
geom_bar(stat="identity")
movie_directors = movies_merged_only_movies[,c('Year','Director')]
split_by_director = dplyr::mutate(movie_directors, Director = strsplit(Director,","))
split_by_director = unnest(split_by_director)
melt_directors = melt(split_by_director,id.vars=c('Director'),
measure.vars='Year')
melded_directors = dcast(melt_directors, formula=Director~variable,
fun.aggregate = length)
top_twenty_five_directors= melded_directors[order(-melded_directors$Year)[1:15],]
top_twenty_five_directors = plyr::rename(top_twenty_five_directors, c("Year" = "NumberFilms"))
ggplot(top_twenty_five_directors,aes(x = Director, y = NumberFilms)) +
geom_bar(stat="identity")
ggplot(top_twenty_five_directors,aes(x = Director, y = NumberFilms)) +
geom_bar(stat="identity",na.rm = TRUE)
movie_directors = movies_merged_only_movies[,c('Year','Director')]
split_by_director = dplyr::mutate(movie_directors, Director = strsplit(Director,","))
split_by_director = unnest(split_by_director)
melt_directors = melt(split_by_director,id.vars=c('Director'),
measure.vars='Year')
melded_directors = dcast(melt_directors, formula=Director~variable,
fun.aggregate = length)
top_twenty_five_directors= melded_directors[order(-melded_directors$Year)[1:15],]
top_twenty_five_directors[top_twenty_five_directors$Director=='N/A'] = NA
top_twenty_five_directors = na.omit(top_twenty_five_directors)
top_twenty_five_directors = plyr::rename(top_twenty_five_directors, c("Year" = "NumberFilms"))
ggplot(top_twenty_five_directors,aes(x = Director, y = NumberFilms)) +
geom_bar(stat="identity",na.rm = TRUE)
ggplot(top_twenty_five_directors,aes(x = Director, y = NumberFilms)) +
geom_bar(stat="identity")
top_twenty_five_directors
top_twenty_five_directors= melded_directors[order(-melded_directors$Year)[1:15],]
top_twenty_five_directors
top_twenty_five_directors[top_twenty_five_directors$Director=='N/A'] = NA
top_twenty_five_directors
top_twenty_five_directors = na.omit(top_twenty_five_directors)
top_twenty_five_directors= melded_directors[order(-melded_directors$Year)[1:15],]
top_twenty_five_directors[top_twenty_five_directors$Director=='N/A'] = NA
na.omit(top_twenty_five_directors)
top_twenty_five_directors
split_by_director = dplyr::mutate(movie_directors, Director = strsplit(Director,","))
split_by_director = unnest(split_by_director)
melt_directors = melt(split_by_director,id.vars=c('Director'),
measure.vars='Year')
melded_directors = dcast(melt_directors, formula=Director~variable,
c
c
movie_directors = movies_merged_only_movies[,c('Year','Director')]
split_by_director = dplyr::mutate(movie_directors, Director = strsplit(Director,","))
split_by_director = unnest(split_by_director)
melt_directors = melt(split_by_director,id.vars=c('Director'),
measure.vars='Year')
melded_directors = dcast(melt_directors, formula=Director~variable,
fun.aggregate = length)
top_fifteen_directors= melded_directors[order(-melded_directors$Year)[1:15],]
View(top_fifteen_directors)
na.omit(melded_directors)
View(melded_directors)
melded_directors[Director == 'N/A'] = NA
na.omit(melded_directors)
View(melded_directors)
melded_directors[Director == 'N/A'] = NA
melded_directors = na.omit(melded_directors)
View(melded_directors)
melded_directors[melded_directors == 'N/A'] = NA
melded_directors = na.omit(melded_directors)
split_by_director = dplyr::mutate(movie_directors, Director = strsplit(Director,","))
split_by_director = unnest(split_by_director)
melt_directors = melt(split_by_director,id.vars=c('Director'),
measure.vars='Year')
melded_directors = dcast(melt_directors, formula=Director~variable,
fun.aggregate = length)
melded_directors[melded_directors == 'N/A'] = NA
na.omit(melded_directors)
melded_directors = na.omit(melded_directors)
top_fifteen_directors= melded_directors[order(-melded_directors$Year)[1:15],]
top_twenty_five_directors = plyr::rename(top_twenty_five_directors, c("Year" = "NumberFilms"))
ggplot(top_twenty_five_directors,aes(x = Director, y = NumberFilms)) +
geom_bar(stat="identity")
movie_directors = movies_merged_only_movies[,c('Year','Director')]
split_by_director = dplyr::mutate(movie_directors, Director = strsplit(Director,","))
split_by_director = unnest(split_by_director)
melt_directors = melt(split_by_director,id.vars=c('Director'),
measure.vars='Year')
melded_directors = dcast(melt_directors, formula=Director~variable,
fun.aggregate = length)
melded_directors[melded_directors == 'N/A'] = NA
melded_directors = na.omit(melded_directors)
top_fifteen_directors= melded_directors[order(-melded_directors$Year)[1:15],]
top_fifteen_directors = plyr::rename(top_fifteen_directors, c("Year" = "NumberFilms"))
ggplot(top_twenty_five_directors,aes(x = Director, y = NumberFilms)) +
geom_bar(stat="identity")
#Top 25 Most Prolific Directors
movie_directors = movies_merged_only_movies[,c('Year','Director')]
split_by_director = dplyr::mutate(movie_directors, Director = strsplit(Director,","))
split_by_director = unnest(split_by_director)
melt_directors = melt(split_by_director,id.vars=c('Director'),
measure.vars='Year')
melded_directors = dcast(melt_directors, formula=Director~variable,
fun.aggregate = length)
melded_directors[melded_directors == 'N/A'] = NA
melded_directors = na.omit(melded_directors)
top_fifteen_directors= melded_directors[order(-melded_directors$Year)[1:15],]
top_fifteen_directors = plyr::rename(top_fifteen_directors, c("Year" = "NumberFilms"))
ggplot(top_fifteen_directors,aes(x = Director, y = NumberFilms)) +
geom_bar(stat="identity")
movie_directors = movies_merged_only_movies[,c('Year','Director')]
split_by_director = dplyr::mutate(movie_directors, Director = strsplit(Director,","))
split_by_director = unnest(split_by_director)
melt_directors = melt(split_by_director,id.vars=c('Director'),
measure.vars='Year')
melded_directors = dcast(melt_directors, formula=Director~variable,
fun.aggregate = length)
melded_directors[melded_directors == 'N/A'] = NA
melded_directors = na.omit(melded_directors)
top_ten_directors= melded_directors[order(-melded_directors$Year)[1:15],]
top_ten_directors = plyr::rename(top_ten_directors, c("Year" = "NumberFilms"))
ggplot(top_ten_directors,aes(x = Director, y = NumberFilms)) +
geom_bar(stat="identity")
#Top 10 Most Prolific Directors
movie_directors = movies_merged_only_movies[,c('Year','Director')]
split_by_director = dplyr::mutate(movie_directors, Director = strsplit(Director,","))
split_by_director = unnest(split_by_director)
melt_directors = melt(split_by_director,id.vars=c('Director'),
measure.vars='Year')
melded_directors = dcast(melt_directors, formula=Director~variable,
fun.aggregate = length)
melded_directors[melded_directors == 'N/A'] = NA
melded_directors = na.omit(melded_directors)
top_ten_directors= melded_directors[order(-melded_directors$Year)[1:15],]
top_ten_directors = plyr::rename(top_ten_directors, c("Year" = "NumberFilms"))
ggplot(top_ten_directors,aes(x = Director, y = NumberFilms)) +
geom_bar(stat="identity")
ggplot(top_ten_directors,aes(x = Director, y = NumberFilms)) +
geom_bar(stat="identity", color = "green")
ggplot(top_ten_directors,aes(x = Director, y = NumberFilms)) +
geom_bar(stat="identity", fill = "green")
#Top 10 Most Prolific Directors
movie_directors = movies_merged_only_movies[,c('Year','Director')]
split_by_director = dplyr::mutate(movie_directors, Director = strsplit(Director,","))
split_by_director = unnest(split_by_director)
melt_directors = melt(split_by_director,id.vars=c('Director'),
measure.vars='Year')
melded_directors = dcast(melt_directors, formula=Director~variable,
fun.aggregate = length)
melded_directors[melded_directors == 'N/A'] = NA
melded_directors = na.omit(melded_directors)
top_ten_directors= melded_directors[order(-melded_directors$Year)[1:10],]
top_ten_directors = plyr::rename(top_ten_directors, c("Year" = "NumberFilms"))
ggplot(top_ten_directors,aes(x = Director, y = NumberFilms)) +
geom_bar(stat="identity", fill = "green")
ggplot(top_ten_directors,aes(x = reorder(Director,-value), y = NumberFilms)) +
geom_bar(stat="identity", fill = "green")
ggplot(top_ten_directors,aes(x = reorder(Director,-NumberFilms), y = NumberFilms)) +
geom_bar(stat="identity", fill = "green")
ggplot(top_ten_directors,aes(x = reorder(Director,-NumberFilms), y = NumberFilms)) +
geom_bar(stat="identity", fill = "green") +
scale_y_continuous(breaks=c(0,50,100,150,200,250))
scale_y_continuous(breaks=c(0,50,100,150,200,250) limits = c(0,250))
ggplot(top_ten_directors,aes(x = reorder(Director,-NumberFilms), y = NumberFilms)) +
geom_bar(stat="identity", fill = "green") +
scale_y_continuous(breaks=c(0,50,100,150,200,250), limits = c(0,250))
View(top_ten_directors)
ggplot(top_ten_directors,aes(x = reorder(Director,-NumberFilms), y = NumberFilms)) +
geom_bar(stat="identity", fill = "green") +
xlab("Directors") +
ylab("Number of Films")
scale_y_continuous(breaks=c(0,50,100,150,200,250), limits = c(0,250))
#Load Packages
library('ggplot2')
library('reshape2')
library('plyr')
library('dplyr')
library('tidyr')
library('scales')
load('movies_merged')
movies_merged_only_movies = subset(movies_merged, Type == "movie")
rows_removed = nrow(movies_merged) - nrow(movies_merged_only_movies)
# Output Number of rows removed
print(paste(c("Rows removed:", rows_removed)))
print(paste(c("Rows removed:", rows_removed)))
runtimeAsNumeric = function(df)  {
movie_times_numeric = gsub("\\D+","",df$Runtime)
movie_times_numeric = as.numeric(movie_times_numeric)
df[5] = movie_times_numeric
return(df)
}
movies_merged_only_movies = runtimeAsNumeric(movies_merged_only_movies)
View(movies_merged_only_movies)
qplot(Runtime, data = movies_merged_only_movies,
geom="histogram", binwidth=25,
xlab = "Movie Runtime",
ylab = "Frequency") + xlim(0,300)
# Illustrate Movie Runtime against Years
ggplot(movies_merged_only_movies, aes(Year, Runtime)) +
geom_point(alpha = 0.1) + stat_smooth(color="red")
#Illustrate Movie Runtime Against Budget.
ggplot(movies_merged_only_movies, aes(Budget, Runtime)) +
geom_point(aes(color=Year)) + scale_colour_gradient(low = "red") + stat_smooth(color="red")
## QUESTION 3 ##
## Please note that parseGenre may take a moment
## to perform the operation and return a new data frame
parseGenre = function(df) {
# Split Genre Column by , and unnest
split_Frame = dplyr::mutate(df, Genre = strsplit(Genre,","))
parsedFrame = unnest(split_Frame)
# Some Genres contained white space resulting in two columns
# i.e "Action" and " Action"
parsedFrame[['Genre']] = trimws(parsedFrame[['Genre']])
# Get data into tall format
parsedFrame = melt(parsedFrame, id.vars=names(parsedFrame)[1:38],
measure.vars = 'Genre')
genre_dictionary = unique(parsedFrame[['value']])
parsedFrameDCast = dcast(parsedFrame, formula = ... ~ value, fill=0)
#Remove the variable column names "variable"
parsedFrameDCast$variable = NULL
return(parsedFrameDCast)
}
movies_merged_only_movies = parseGenre(movies_merged_only_movies)
View(movies_merged_only_movies)
sum_genres = colSums(movies_merged_only_movies[39:length(movies_merged_only_movies)])
top_ten = sort(sum_genres,decreasing = TRUE)[1:10]
top_ten = data.frame(names(top_ten),top_ten)
names(top_ten) = c("genre", "total")
top_ten$proportion = top_ten$total/sum(top_ten$total)
genre_dict_top_ten = rownames(top_ten)
# Graph of Movies that are considered a top ten genre
ggplot(top_ten, aes(x = genre_dict_top_ten, y=total)) +
xlab("Genres") +
geom_bar(stat="identity", fill = "blue")
# Relationship between Gross Revenue and Genre
genre_dict_top_ten = rownames(top_ten)
gross_genre_relationship = movies_merged_only_movies[genre_dict_top_ten]
gross_genre_relationship['Gross'] = movies_merged_only_movies$Gross
molten = melt(gross_genre_relationship, genre_dict_top_ten, variable.vars = 'Gross',na.rm = TRUE )
genre_and_gross = dcast(molten, formula = genre_dict_top_ten~variable, fun.aggregate = sum)
genre_and_gross = genre_and_gross[order(-genre_and_gross$Gross),]
top_ten_by_gross = genre_and_gross[1:10,]
top_ten_by_gross$proportion = top_ten_by_gross$Gross/sum(top_ten_by_gross$Gross)
ggplot(top_ten_by_gross, aes(x = genre_dict_top_ten, y = Gross)) +
geom_bar(stat="identity") +
xlab("Top Ten Genres by Gross Sales") +
ylab("Gross Sales") +
scale_y_continuous(labels = comma)
Difference in Years
years_not_equal = subset(movies_merged_only_movies,  Year != year(Released))
years_difference = sort(movies_merged_only_movies$Year - year(movies_merged_only_movies$Released),
decreasing = TRUE)
#The Year value and year in the Released Date value are equal.
# Utilizes lubridate package
movies_merged_no_errors = subset(movies_merged_only_movies, Year == format(Released,"%Y"))
# movies_merged_no_errors = subset(movies_merged_only_movies, Year == year(Released))
num_titles_removed = nrow(movies_merged_only_movies) - nrow(movies_merged_no_errors)
print(paste(c("Rows removed:", num_titles_removed)))
## QUESTION 5 ##
unique_genres = names(movies_merged_only_movies[39:length(movies_merged_only_movies)])
movies_dates_genres_gross = movies_merged_only_movies[,append(c('Gross','Released'),
unique_genres)]
movies_dates_genres_gross$Released = format(movies_dates_genres_gross$Released,"%b")
molten_months_genres = melt(movies_dates_genres_gross, id.vars=append('Released',unique_genres),
variable.vars = c('Gross'), na.rm = TRUE)
#Sum of Gross Sales by month
gross_sales_by_month = dcast(molten_months_genres, formula=Released~variable,
fun.aggregate = sum)
# Sum of generes by month.
movies_data_genre = movies_merged_only_movies[,append(c('Released'),unique_genres)]
movies_data_genre$Released = format(movies_data_genre$Released,"%b")
melt_movie_data_genre = melt(movies_data_genre,id.vars = 'Released',
variable.vars = unique_genres, na.rm = TRUE)
gross_sales_and_genre_distribution_by_month = na.omit(dcast(melt_movie_data_genre, formula=Released~variable,
fun.aggregate = sum))
melt_again = melt(gross_sales_and_genre_distribution_by_month, id.vars = "Released",
variable.vars = unique_genres)
melt_again$Released = factor(melt_again$Released,levels = month.abb)
gross_sales_by_month$Released = factor(gross_sales_by_month$Released,levels = month.abb)
order_by_gross = na.omit(gross_sales_by_month[order(-gross_sales_by_month$Gross),])
ggplot(order_by_gross,aes(x = Released, y = Gross, group=1))+
geom_line() +
scale_y_continuous(label = comma)
ggplot(melt_again, aes(x = Released, y = value, color=variable, label=variable)) +
geom_point() +
ylab("Number of Movies") +
geom_text(size=2, check_overlap = TRUE)
movies_and_ratings = movies_merged_only_movies[,c("Title","imdbRating","imdbVotes",
"tomatoMeter", "tomatoRating","tomatoReviews",
"tomatoFresh","tomatoRotten","tomatoConsensus",
"tomatoUserMeter","tomatoUserRating",
"tomatoUserReviews","Gross")]
#IMDB Ratings against Votes
ggplot(movies_and_ratings, aes(x = imdbRating, y =imdbVotes, color = imdbRating,na.rm=TRUE)) +
geom_point(alpha = 0.4)
#Averge number of votes
mean(movies_and_ratings$imdbVotes,na.rm = TRUE)
median(movies_and_ratings$imdbVotes,na.rm=TRUE)
#Imdb Rating Histogram
ggplot(movies_and_ratings,aes(imdbRating)) +
geom_histogram(aes(fill = ..count..))
# Mean of Imdb Rating
mean(movies_and_ratings$imdbRating,na.rm = TRUE)
#Median of Imdb Rating
mean(movies_and_ratings$imdbRating,na.rm = TRUE)
#IMDB Rating against TomatoMeter (percentage of critics who saw film positivly)
ggplot(movies_and_ratings, aes(x = imdbRating, y = tomatoMeter,na.rm=TRUE)) +
geom_point(alpha = 0.5) + stat_smooth(color = "red")
# IMDB Rating against Tomato Rating(average critc raw score)
ggplot(movies_and_ratings, aes(x = imdbRating, y = tomatoRating,na.rm=TRUE)) +
geom_point(alpha = 0.5) + stat_smooth(color = "red")
ggplot(movies_and_ratings, aes(x = imdbVotes, y = Gross,color = imdbRating,na.rm=TRUE)) +
xlim(100,2000000) +
geom_point() +
stat_smooth(color = "red") +
scale_y_continuous(label = comma)
ggplot(movies_and_ratings, aes(x = tomatoMeter, y = Gross,na.rm=TRUE)) +
ylim(80000000,2500000000) +
geom_point(alpha = 0.5) +
stat_smooth(color = "red")
movies_correlations = na.omit(movies_and_ratings[,c("imdbRating","imdbVotes",
"tomatoMeter", "tomatoRating","tomatoReviews",
"tomatoFresh","tomatoRotten",
"tomatoUserMeter","tomatoUserRating",
"tomatoUserReviews","Gross")])
cor(x = movies_correlations$imdbRating, movies_correlations$Gross)
cor(x = movies_correlations$imdbVotes, movies_correlations$Gross)
cor(x = movies_correlations$tomatoMeter, movies_correlations$Gross)
cor(x = movies_correlations$tomatoRating, movies_correlations$Gross)
cor(x = movies_correlations$tomatoReviews, movies_correlations$Gross)
cor(x = movies_correlations$tomatoFresh, movies_correlations$Gross)
cor(x = movies_correlations$tomatoRotten, movies_correlations$Gross)
cor(x = movies_correlations$tomatoUserMeter, movies_correlations$Gross)
cor(x = movies_correlations$tomatoUserRating, movies_correlations$Gross)
cor(x = movies_correlations$tomatoUserReviews, movies_correlations$Gross)
## QUESTION 7 ##
## Note parseAwards may take about 45 seconds to compute
## and return the data frame with binary values
parseAwards = function(df) {
df$No_Awards = 0
df$Some_Awards = 0
df$Many_Awards = 0
for(i in 1:nrow(df)) {
award = df[['Awards']][i]
awards_split = as.numeric(unlist(strsplit(gsub("[^0-9]", "", unlist(award)), "")))
if(sum(awards_split) == 0){
df[['No_Awards']][i] = 1
df[['Some_Awards']][i]  = 0
df[['Many_Awards']][i] = 0
} else if(sum(awards_split) <= 8) {
df[['No_Awards']][i]  = 0
df[['Some_Awards']][i] = 1
df[['Many_Awards']][i] = 0
} else {
df[['No_Awards']][i]  = 0
df[['Some_Awards']][i]  = 0
df[['Many_Awards']][i]= 1
}
}
return(df)
}
movies_binary_awards = parseAwards(movies_merged_only_movies)
View(movies_binary_awards)
movies_binary_awards_no_na_gross = movies_binary_awards[!is.na(movies_binary_awards$Gross),]
ratio_some_to_many_awards = sum(movies_binary_awards$Some_Awards==1)/
sum(movies_binary_awards$Many_Awards==1)
ggplot(movies_binary_awards_no_na_gross[movies_binary_awards_no_na_gross$No_Awards == 1,]
,aes(x = log(Gross),col=I('white'))) +geom_histogram( binwidth = 0.5)
no_award = subset(movies_binary_awards_no_na_gross,movies_binary_awards_no_na_gross$No_Awards == 1)
mean(no_award$Gross)
median(no_award$Gross)
#Some Awards vs Gross
ggplot(movies_binary_awards_no_na_gross[movies_binary_awards_no_na_gross$Some_Awards == 1,]
,aes(x = log(Gross),col=I('white'))) +geom_histogram( binwidth = 0.5)
some_award = subset(movies_binary_awards_no_na_gross,movies_binary_awards_no_na_gross$Some_Awards == 1)
mean(some_award$Gross)
median(some_award$Gross)
ggplot(movies_binary_awards_no_na_gross[movies_binary_awards_no_na_gross$Many_Awards == 1,]
,aes(x = log(Gross),col=I('white'))) +geom_histogram( binwidth = 0.5)
many_award = subset(movies_binary_awards_no_na_gross,movies_binary_awards_no_na_gross$Many_Awards == 1)
mean(many_award$Gross)
median(many_award$Gross)
## QUESTION 8 ##
# Illustrating G,PG,PG-13 and R Ratings against Gross Sales
movies_ratings_and_gross = movies_merged_only_movies[,c('Rated', 'Gross',
'imdbVotes')]
movies_ratings_and_gross = movies_ratings_and_gross[!is.na(movies_ratings_and_gross$Gross),]
movies_ratings_and_gross = subset(movies_ratings_and_gross,
movies_ratings_and_gross$Rated == 'G' |
movies_ratings_and_gross$Rated == 'PG' |
movies_ratings_and_gross$Rated == 'PG-13' |
movies_ratings_and_gross$Rated == 'R')
# Graph
ggplot(movies_ratings_and_gross,
aes(x = log(imdbVotes), y = log(Gross), color=factor(Rated))) +
geom_point()
# Metacritic against Rotten Tomatoes Rating system.
metacritic_vs_rotten_tomatoes = movies_merged_only_movies[,c('Metascore',
'tomatoRating')]
metacritic_vs_rotten_tomatoes = metacritic_vs_rotten_tomatoes[
!is.na(metacritic_vs_rotten_tomatoes$Metascore),]
metacritic_vs_rotten_tomatoes = metacritic_vs_rotten_tomatoes[
!is.na(metacritic_vs_rotten_tomatoes$tomatoRating),]
#Must convert Metasore from char to numeric
metacritic_vs_rotten_tomatoes$Metascore = as.numeric(
metacritic_vs_rotten_tomatoes$Metascore)
#Illustrating Metascore vs Rotten Tomato Rating
ggplot(metacritic_vs_rotten_tomatoes, aes(x=tomatoRating, y = Metascore,
color=tomatoRating)) +
geom_point(na.rm=TRUE) +
scale_y_continuous(breaks=c(10,20,30,40,50,60,70,80,90,100)) +
stat_smooth(color = "red")
metacritic_cor = metacritic_vs_rotten_tomatoes[!is.na(metacritic_vs_rotten_tomatoes$Metascore),]
cor(metacritic_cor$Metascore, metacritic_cor$tomatoRating)
#Top 10 Most Prolific Directors
movie_directors = movies_merged_only_movies[,c('Year','Director')]
split_by_director = dplyr::mutate(movie_directors, Director = strsplit(Director,","))
split_by_director = unnest(split_by_director)
melt_directors = melt(split_by_director,id.vars=c('Director'),
measure.vars='Year')
melded_directors = dcast(melt_directors, formula=Director~variable,
fun.aggregate = length)
melded_directors[melded_directors == 'N/A'] = NA
melded_directors = na.omit(melded_directors)
top_ten_directors= melded_directors[order(-melded_directors$Year)[1:10],]
top_ten_directors = plyr::rename(top_ten_directors, c("Year" = "NumberFilms"))
ggplot(top_ten_directors,aes(x = reorder(Director,-NumberFilms), y = NumberFilms)) +
geom_bar(stat="identity", fill = "green") +
xlab("Directors") +
ylab("Number of Films")
scale_y_continuous(breaks=c(0,50,100,150,200,250), limits = c(0,250))
# Graph
ggplot(movies_ratings_and_gross,
aes(x = log(imdbVotes), y = log(Gross), color=factor(Rated))) +
geom_point()
